{"ast":null,"code":"import axios from 'axios';\n\n// Check if we're in development mode\nconst isDevelopment = process.env.NODE_ENV === 'development';\n\n// Create an axios instance with custom configuration\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  // If in development, prioritize using localStorage\n  useLocalStorageFallback: isDevelopment\n});\n\n// Add a request interceptor to handle authentication tokens\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add a response interceptor to handle common errors\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  // Implement development fallback for API errors\n  if (error.response && error.response.status === 500) {\n    console.log('API error in development mode, fallback to localStorage may be used');\n  }\n\n  // Don't automatically log out on API errors\n  // Only log console warning for debugging\n  if (error.response && error.response.status === 401) {\n    console.warn('API authentication error, but keeping user logged in');\n    // We're removing this automatic logout behavior\n    // Users should only be logged out when they explicitly press the logout button\n  }\n  return Promise.reject(error);\n});\n\n// Utility functions for common API operations\nexport const loginUser = async credentials => {\n  // If in development mode or using fallback is explicitly enabled, use localStorage directly\n  if (isDevelopment || api.defaults.useLocalStorageFallback) {\n    console.log('Development mode: using localStorage for authentication');\n    try {\n      return handleLoginFallback(credentials);\n    } catch (error) {\n      throw error; // Re-throw the error to be handled by the calling component\n    }\n  }\n\n  // Otherwise, try the API first\n  try {\n    const response = await api.post('/api/auth/login/', credentials);\n    return response.data;\n  } catch (error) {\n    console.log('API error, using localStorage fallback');\n    return handleLoginFallback(credentials);\n  }\n};\nexport const registerUser = async userData => {\n  // If in development mode or using fallback is explicitly enabled, use localStorage directly\n  if (isDevelopment || api.defaults.useLocalStorageFallback) {\n    console.log('Development mode: using localStorage for registration');\n    try {\n      return handleRegisterFallback(userData);\n    } catch (error) {\n      throw error; // Re-throw the error to be handled by the calling component\n    }\n  }\n\n  // Otherwise, try the API first\n  try {\n    const response = await api.post('/api/auth/register/', userData);\n    return response.data;\n  } catch (error) {\n    console.log('API error, using localStorage fallback for registration');\n    return handleRegisterFallback(userData);\n  }\n};\n\n// Development fallback functions\nconst handleLoginFallback = credentials => {\n  let users = [];\n  try {\n    const usersData = localStorage.getItem('users');\n    if (usersData) {\n      const parsedUsers = JSON.parse(usersData);\n      if (Array.isArray(parsedUsers)) {\n        users = parsedUsers;\n      }\n    }\n  } catch (e) {\n    console.error('Error parsing users from localStorage:', e);\n    throw new Error('An error occurred during login');\n  }\n\n  // Find user with matching credentials\n  const user = users.find(u => u.username === credentials.username && u.password === credentials.password);\n  if (!user) {\n    throw new Error('Invalid username or password');\n  }\n\n  // Create mock response\n  return {\n    token: 'dev-token-' + Date.now(),\n    user: {\n      id: user.id,\n      username: user.username,\n      email: user.email,\n      first_name: user.first_name || '',\n      last_name: user.last_name || '',\n      is_staff: user.is_staff || false\n    }\n  };\n};\nconst handleRegisterFallback = userData => {\n  let users = [];\n  try {\n    const usersData = localStorage.getItem('users');\n    if (usersData) {\n      const parsedUsers = JSON.parse(usersData);\n      if (Array.isArray(parsedUsers)) {\n        users = parsedUsers;\n      }\n    }\n  } catch (e) {\n    console.error('Error parsing users from localStorage:', e);\n    users = [];\n  }\n\n  // Check if username already exists\n  if (users.some(user => user.username === userData.username)) {\n    throw new Error('Username already exists');\n  }\n\n  // Check if email already exists\n  if (users.some(user => user.email === userData.email)) {\n    throw new Error('Email already exists');\n  }\n\n  // Add new user\n  const newUser = {\n    ...userData,\n    id: Date.now(),\n    date_joined: new Date().toISOString(),\n    is_staff: false\n  };\n  users.push(newUser);\n  localStorage.setItem('users', JSON.stringify(users));\n\n  // Create mock response with user data for auto-login\n  return {\n    message: 'User registered successfully',\n    user: {\n      id: newUser.id,\n      username: newUser.username,\n      email: newUser.email,\n      first_name: newUser.first_name || '',\n      last_name: newUser.last_name || '',\n      is_staff: newUser.is_staff || false\n    }\n  };\n};\nexport default api;","map":{"version":3,"names":["axios","isDevelopment","process","env","NODE_ENV","api","create","baseURL","REACT_APP_API_URL","timeout","headers","useLocalStorageFallback","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","response","status","console","log","warn","loginUser","credentials","defaults","handleLoginFallback","post","data","registerUser","userData","handleRegisterFallback","users","usersData","parsedUsers","JSON","parse","Array","isArray","e","Error","user","find","u","username","password","Date","now","id","email","first_name","last_name","is_staff","some","newUser","date_joined","toISOString","push","setItem","stringify","message"],"sources":["C:/Users/real2/Desktop/PFA1/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Check if we're in development mode\nconst isDevelopment = process.env.NODE_ENV === 'development';\n\n// Create an axios instance with custom configuration\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  // If in development, prioritize using localStorage\n  useLocalStorageFallback: isDevelopment\n});\n\n// Add a request interceptor to handle authentication tokens\napi.interceptors.request.use(\n  config => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  error => {\n    return Promise.reject(error);\n  }\n);\n\n// Add a response interceptor to handle common errors\napi.interceptors.response.use(\n  response => {\n    return response;\n  },\n  error => {\n    // Implement development fallback for API errors\n    if (error.response && error.response.status === 500) {\n      console.log('API error in development mode, fallback to localStorage may be used');\n    }\n    \n    // Don't automatically log out on API errors\n    // Only log console warning for debugging\n    if (error.response && error.response.status === 401) {\n      console.warn('API authentication error, but keeping user logged in');\n      // We're removing this automatic logout behavior\n      // Users should only be logged out when they explicitly press the logout button\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\n// Utility functions for common API operations\nexport const loginUser = async (credentials) => {\n  // If in development mode or using fallback is explicitly enabled, use localStorage directly\n  if (isDevelopment || api.defaults.useLocalStorageFallback) {\n    console.log('Development mode: using localStorage for authentication');\n    try {\n      return handleLoginFallback(credentials);\n    } catch (error) {\n      throw error; // Re-throw the error to be handled by the calling component\n    }\n  }\n  \n  // Otherwise, try the API first\n  try {\n    const response = await api.post('/api/auth/login/', credentials);\n    return response.data;\n  } catch (error) {\n    console.log('API error, using localStorage fallback');\n    return handleLoginFallback(credentials);\n  }\n};\n\nexport const registerUser = async (userData) => {\n  // If in development mode or using fallback is explicitly enabled, use localStorage directly\n  if (isDevelopment || api.defaults.useLocalStorageFallback) {\n    console.log('Development mode: using localStorage for registration');\n    try {\n      return handleRegisterFallback(userData);\n    } catch (error) {\n      throw error; // Re-throw the error to be handled by the calling component\n    }\n  }\n  \n  // Otherwise, try the API first\n  try {\n    const response = await api.post('/api/auth/register/', userData);\n    return response.data;\n  } catch (error) {\n    console.log('API error, using localStorage fallback for registration');\n    return handleRegisterFallback(userData);\n  }\n};\n\n// Development fallback functions\nconst handleLoginFallback = (credentials) => {\n  let users = [];\n  try {\n    const usersData = localStorage.getItem('users');\n    if (usersData) {\n      const parsedUsers = JSON.parse(usersData);\n      if (Array.isArray(parsedUsers)) {\n        users = parsedUsers;\n      }\n    }\n  } catch (e) {\n    console.error('Error parsing users from localStorage:', e);\n    throw new Error('An error occurred during login');\n  }\n  \n  // Find user with matching credentials\n  const user = users.find(u => \n    u.username === credentials.username && u.password === credentials.password\n  );\n  \n  if (!user) {\n    throw new Error('Invalid username or password');\n  }\n  \n  // Create mock response\n  return {\n    token: 'dev-token-' + Date.now(),\n    user: {\n      id: user.id,\n      username: user.username,\n      email: user.email,\n      first_name: user.first_name || '',\n      last_name: user.last_name || '',\n      is_staff: user.is_staff || false\n    }\n  };\n};\n\nconst handleRegisterFallback = (userData) => {\n  let users = [];\n  try {\n    const usersData = localStorage.getItem('users');\n    if (usersData) {\n      const parsedUsers = JSON.parse(usersData);\n      if (Array.isArray(parsedUsers)) {\n        users = parsedUsers;\n      }\n    }\n  } catch (e) {\n    console.error('Error parsing users from localStorage:', e);\n    users = [];\n  }\n  \n  // Check if username already exists\n  if (users.some(user => user.username === userData.username)) {\n    throw new Error('Username already exists');\n  }\n  \n  // Check if email already exists\n  if (users.some(user => user.email === userData.email)) {\n    throw new Error('Email already exists');\n  }\n  \n  // Add new user\n  const newUser = {\n    ...userData,\n    id: Date.now(),\n    date_joined: new Date().toISOString(),\n    is_staff: false\n  };\n  \n  users.push(newUser);\n  localStorage.setItem('users', JSON.stringify(users));\n  \n  // Create mock response with user data for auto-login\n  return {\n    message: 'User registered successfully',\n    user: {\n      id: newUser.id,\n      username: newUser.username,\n      email: newUser.email,\n      first_name: newUser.first_name || '',\n      last_name: newUser.last_name || '',\n      is_staff: newUser.is_staff || false\n    }\n  };\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}